/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.handong.csee.java.javaFinalProject;

import java.util.ArrayList;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

import edu.handong.csee.java.javaFinalProject.datamodel.graphT;
import edu.handong.csee.java.javaFinalProject.datamodel.summaryT;
import edu.handong.csee.java.javaFinalProject.utils.Utils;;

public class Library {

	String input;
	String output;
	boolean help;

	public boolean someLibraryMethod() {
		return true;
	}

	public void run(String[] args) {

		Options option = createOptions();
		if (parseOptions(option, args)) {
			if (help) {
				printHelp(option);
				return;
			}

		} else {
			System.exit(0);
		}
		try {

			// when there are not enough arguments from CLI, it throws the
			// NotEnoughArgmentException which must be defined by you.
			if (args.length < 2)
				throw new Exception();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(0);
		}

		String dataPath = input; // csv file to be analyzed
		String resultPath = output; // the file path where the results are saved.

		System.out.println("summarys ------------------------------------- S");
		ArrayList<summaryT<String>> summarys = Utils.ZipReaderSummary(dataPath);
		ArrayList<graphT<String>> graphs = Utils.ZipReaderGraph(dataPath);
		System.out.println("summarys ------------------------------------- E");
		if (summarys == null) {
			System.out.println("summarys is null");
		} else {
			for (int i = 0; i < summarys.size(); i++) {
				System.out.println("====>>>> [" + i + "]" + summarys.get(i).toString());

			}
		}

		if (graphs == null) {
			System.out.println("graphs is null");
		} else {
			for (int i = 0; i < graphs.size(); i++) {
				System.out.println("====>>>> [" + i + "]" + graphs.get(i).toString());

			}
		}
		// System.out.println("graphs : "+graphs.get(0));

	}

	private boolean parseOptions(Options options, String[] args) {
		CommandLineParser parser = new DefaultParser();

		try {

			CommandLine cmd = parser.parse(options, args);

			input = cmd.getOptionValue("i");
			output = cmd.getOptionValue("o");
			help = cmd.hasOption("h");

		} catch (Exception e) {
			printHelp(options);
			return false;
		}

		return true;
	}

	private Options createOptions() {
		Options options = new Options();

		// add options by using OptionBuilder
		options.addOption(Option.builder("i").longOpt("input").desc("Set an input file path").hasArg()
				.argName("Input path").required().build());

		options.addOption(Option.builder("o").longOpt("output").desc("Set an input file path").hasArg()
				.argName("Output path").required().build());

		// add options by using OptionBuilder
		options.addOption(Option.builder("h").longOpt("help").desc("Help").build());

		return options;
	}

	private void printHelp(Options options) {
		// automatically generate the help statement
		HelpFormatter formatter = new HelpFormatter();
		String header = "HGU Course Analyzer";
		String footer = "";
		formatter.printHelp("HGUCourseCounter", header, options, footer, true);
	}

}
