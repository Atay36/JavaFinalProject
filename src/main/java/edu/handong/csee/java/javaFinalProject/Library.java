/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.handong.csee.java.javaFinalProject;

import java.io.File;
import java.util.ArrayList;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

import edu.handong.csee.java.javaFinalProject.datamodel.GraphT;
import edu.handong.csee.java.javaFinalProject.datamodel.SummaryT;
import edu.handong.csee.java.javaFinalProject.utils.MyException;
import edu.handong.csee.java.javaFinalProject.utils.Utils;;

public class Library implements Runnable {

	String input;
	String output;
	boolean help;


	public void run(String[] args) throws MyException {

		Options option = createOptions();
		if (parseOptions(option, args)) {
			if (help) {
				printHelp(option);
				return;
			}

		} else {
			System.exit(0);
		}
		try {

			// when there are not enough arguments from CLI, it throws the
			// NotEnoughArgmentException which must be defined by you.
			if (args.length < 2)
				throw new Exception();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(0);
		}

		String dataPath = input; // csv file to be analyzed
		String resultPath = output; // the file path where the results are saved.

		ArrayList<String> fileNames = new ArrayList<String>();

		File file = new File(dataPath);
		boolean isExists = file.exists();

		if (!isExists) {
			System.out.println("There is nothing.");
			return;
		}
		if (file.isDirectory()) {
			File[] fileList = file.listFiles();
			for (File tFile : fileList) {
				// System.out.print(tFile.getName());
				if(!tFile.getName().contains(".zip")) continue;
				fileNames.add(tFile.getName());

			}
		} else {
			System.out.println("It is not a directory.");
			return;
		} 
		if(fileNames.size()<1) {
			System.out.println("file not found");
			return;
		} else {
			System.out.println("file count : " + fileNames.size());

		}
		
		ExcelUtil util = new ExcelUtil(dataPath, resultPath, fileNames, "summary");
		Thread t1 = new Thread(util,"summary Thread");
		t1.start();
		
		util = new ExcelUtil(dataPath, resultPath, fileNames, "graph");
		Thread t2 = new Thread(util,"graph Thread");
		t2.start();

		
	}
	
	public class ExcelUtil extends Thread {
		private String dataPath;
		private String resultPath;
		
		private ArrayList<String> fileNames;
		private String dataType;
		
		public ExcelUtil(String dataPath, String resultPath, ArrayList<String> fileNames, String dataType ){
			this.dataPath = dataPath;
			this.resultPath = resultPath;
			this.fileNames = fileNames;
			this.dataType = dataType;
			
		}
		
		public void run() {

			System.out.println(dataType+" ------------------------------------- S");

			if( dataType.equals("summary")) {
				
				ArrayList<SummaryT<String>> totalLists = new ArrayList<SummaryT<String>>();
				ArrayList<String> errorList = new ArrayList<String>();

				for (int i = 0; i < fileNames.size(); i++) {
					String name = fileNames.get(i);
					String path = dataPath + "/" + name;
					System.out.println(">>> path : " + path);
					
					ArrayList<SummaryT<String>> list;
					try {
						list = Utils.ZipReaderSummary(path, name.replace(".zip", ""));
						if (list.size() > 0) {
							totalLists.addAll(list);
						} else {
							errorList.add(name);
						}
					} catch (Exception e) {
						System.out.println("==== ExcelUtil summary Exception : " + e.toString());
					}
				}

				System.out.println(">>> totalLists : " + totalLists.size());
				Utils.writeexcelSummary(totalLists, resultPath);
				Utils.writeError(errorList, "Error1.csv" );
					
			} else if (dataType.equals("graph")){

				ArrayList<GraphT<String>> totalLists = new ArrayList<GraphT<String>>();
				ArrayList<String> errorList = new ArrayList<String>();

				for (int i = 0; i < fileNames.size(); i++) {
					String name = fileNames.get(i);
					String path = dataPath + "/" + name;
					System.out.println(">>> path : " + path);

					ArrayList<GraphT<String>> list;
					try {
						list = Utils.ZipReaderGraph(path, name.replace(".zip", ""));
						if (list.size() > 0) {
							totalLists.addAll(list);
						} else {
							errorList.add(name);
						}
					} catch (Exception e) {
						System.out.println("==== ExcelUtil graph Exception : " + e.toString());
					}
				}
				
				System.out.println(">>> totalLists : " + totalLists.size());
				Utils.writeexcelGraph(totalLists, resultPath);
				Utils.writeError(errorList, "Error2.csv" );

			}

			System.out.println(dataType+" ------------------------------------- E");
		} // run

	}

	private boolean parseOptions(Options options, String[] args) {
		CommandLineParser parser = new DefaultParser();

		try {

			CommandLine cmd = parser.parse(options, args);

			input = cmd.getOptionValue("i");
			output = cmd.getOptionValue("o");
			help = cmd.hasOption("h");

		} catch (Exception e) {
			printHelp(options);
			return false;
		}

		return true;
	}

	private Options createOptions() {
		Options options = new Options();

		// add options by using OptionBuilder
		options.addOption(Option.builder("i").longOpt("input").desc("Set an input file path").hasArg()
				.argName("Input path").required().build());

		options.addOption(Option.builder("o").longOpt("output").desc("Set an input file path").hasArg()
				.argName("Output path").required().build());

		// add options by using OptionBuilder
		options.addOption(Option.builder("h").longOpt("help").desc("Help").build());

		return options;
	}

	private void printHelp(Options options) {
		// automatically generate the help statement
		HelpFormatter formatter = new HelpFormatter();
		String header = "HGU Course Analyzer";
		String footer = "";
		formatter.printHelp("HGUCourseCounter", header, options, footer, true);
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

}
